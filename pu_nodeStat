#!/bin/bash
# Copyright (C) 2022-2024 Timothy J. Williams
# License MIT [https://opensource.org/licenses/MIT]

usage="Usage: $0 [-h] [LustreApps|EarlyAppAccess|intel_get_well|hpe|intel|all]"
helpText=$'Prints human-readable counts of status for nodes on Aurora.\n\tLustreApps | EarlyAppAccess\t- EarlyAppAccess queue nodes\n\tintel_get_well\t\t\t- Intel system stabilization queue nodes\n\thpe\t\t\t\t- hpe nodes\n\tintel\t\t\t\t- intel nodes\n\tall\t\t\t\t- status of all nodes'

if [ "$#" -ne 1 ] ; then
    argCnt="$#"
    if [[ "$argCnt" -ge 2 ||  "$argCnt" == 0 ]] ; then
        echo $usage >&2
        exit 1
    fi
else
    partition=$1
    if [[ "$partition" == "-h" ]]; then
        echo $usage $'\n'"$helpText" >&2
        exit 0
    else
        if [[ "$partition" != "LustreApps" && "$partition" != "EarlyAppAccess" && "$partition" != "intel_get_well"  && "$partition" != "hpe" && "$partition" != "intel" && "$partition" != "all"  ]]; then
            echo "Unknown argument: $partition ; usage: $usage" >&2
            exit 1
        fi
    fi
fi

nodeStatuses=( $(pbsnodes -a -F json | jq -r '.nodes[] | [.state] | @tsv' | sort | uniq) )

pbsnodesOutput=`pbsnodes -a -F json`

if [[ "$partition" == "LustreApps" || "$partition" == "EarlyAppAccess"  ]]; then
    echo ""
    echo "PARTITION: LustreApps (EarlyAppAccess)"
    echo "------------------------"
    echo "Nodes  Status"
    echo "-----  ------"
    for status in "${nodeStatuses[@]}"; do
        printf "%5s  %-18s \n" `printf '%s\n' "$pbsnodesOutput" | jq -r '.nodes[] | select( (.state=="'${status}'") and .resources_available.debug!="True" and .resources_available.validation!="True" and .resources_available.intel=="True" and .resources_available.hpe!="True" and .resources_available.broken!="True" and .resources_available.at_queue=="LustreApps") | [.resources_available.host,.state] | @tsv' | grep "x" | wc -l` ${status}
    done
    printf "%5s  %-18s \n" `printf '%s\n' "$pbsnodesOutput" > jq -r '.nodes[] | select( .resources_available.debug!="True" and .resources_available.validation!="True" and .resources_available.intel=="True" and .resources_available.hpe!="True" and .resources_available.broken=="True" and .resources_available.at_queue=="LustreApps") | [.resources_available.host,.state] | @tsv' | grep "x" | wc -l` "broken"
fi

if [[ "$partition" == "intel_get_well"  ]]; then
    echo ""
    echo "PARTITION: intel_get_well"
    echo "------------------------"
    echo "Nodes  Status"
    echo "-----  ------"
    for status in "${nodeStatuses[@]}"; do
        printf "%5s  %-18s \n" `printf '%s\n' "$pbsnodesOutput" | jq -r '.nodes[] | select( (.state=="'${status}'") and .resources_available.debug!="True" and .resources_available.validation!="True" and .resources_available.intel=="True" and .resources_available.hpe!="True" and .resources_available.broken!="True" and .resources_available.at_queue=="intel_get_well") | [.resources_available.host,.state] | @tsv' | grep "x" | wc -l` ${status}
    done
    printf "%5s  %-18s \n" `printf '%s\n' "$pbsnodesOutput" > jq -r '.nodes[] | select( .resources_available.debug!="True" and .resources_available.validation!="True" and .resources_available.intel=="True" and .resources_available.hpe!="True" and .resources_available.broken=="True" and .resources_available.at_queue=="intel_get_well") | [.resources_available.host,.state] | @tsv' | grep "x" | wc -l` "broken"
fi

if [[ "$partition" == "intel"  ]]; then
    echo ""
    echo "PARTITION: intel"
    echo "---------------------"
    echo "Nodes  Status"
    echo "-----  ------"
    for status in "${nodeStatuses[@]}"; do
        printf "%5s  %-18s \n" `printf '%s\n' "$pbsnodesOutput" | jq -r '.nodes[] | select( (.state=="'${status}'") and .resources_available.intel=="True" and .resources_available.broken!="True") | [.resources_available.host,.state] | @tsv' | wc -l` $status
    done
    printf "%5s  %-18s \n" `printf '%s\n' "$pbsnodesOutput" | jq -r '.nodes[] | select( .resources_available.intel=="True" and .resources_available.broken=="True") | [.resources_available.host,.state] | @tsv' | wc -l` "broken"
    echo ""
    exit 0
fi

if [[ "$partition" == "hpe"  ]]; then
    echo ""
    echo "PARTITION: hpe"
    echo "---------------------"
    echo "Nodes  Status"
    echo "-----  ------"
    for status in "${nodeStatuses[@]}"; do
        printf "%5s  %-18s \n" `printf '%s\n' "$pbsnodesOutput" | jq -r '.nodes[] | select( (.state=="'${status}'") and .resources_available.hpe=="True" and .resources_available.broken!="True") | [.resources_available.host,.state] | @tsv' | wc -l` $status
    done
    printf "%5s  %-18s \n" `printf '%s\n' "$pbsnodesOutput" | jq -r '.nodes[] | select( .resources_available.hpe=="True" and .resources_available.broken=="True") | [.resources_available.host,.state] | @tsv' | wc -l` "broken"
    echo ""
    exit 0
fi

if [[ "$partition" == "all"  ]]; then
    totalNodes=0
    echo ""
    echo "PARTITION: ALL"
    echo "---------------------"
    echo "Nodes  Status"
    echo "-----  --------------"
    for status in "${nodeStatuses[@]}"; do
        (( nodes = `printf '%s\n' "$pbsnodesOutput" | jq -r '.nodes[] | select( (.state=="'${status}'") and .resources_available.broken!="True") | [.resources_available.host,.state] | @tsv' | wc -l` ))
        printf "%5s  %-18s \n" $nodes $status
        (( totalNodes += nodes ))
    done
    (( nodes = `printf '%s\n' "$pbsnodesOutput" | jq -r '.nodes[] | select( .resources_available.broken=="True") | [.resources_available.host,.state] | @tsv' | wc -l` ))
    printf "%5s  %-18s \n" $nodes "broken"
    (( totalNodes += nodes ))
    echo "-----  --------------"
    printf "%5s  %-18s \n" $totalNodes "Total Nodes"
    echo ""
    exit 0
fi
